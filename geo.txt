<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Geographical Map with D3.js</title>
    <script src="https://d3js.org/d3.v7.min.js"></script>
    <script src="https://d3js.org/d3-geo.v2.min.js"></script>
</head>
<body>
    <script>
        // Set up the SVG canvas dimensions
        const width = 800;
        const height = 600;

        // Append SVG canvas to the body
        const svg = d3.select("body")
            .append("svg")
            .attr("width", width)
            .attr("height", height);

        // Set up a projection (using Mercator)
        const projection = d3.geoMercator()
            .scale(120)
            .translate([width / 2, height / 1.5]);

        // Set up a path generator
        const path = d3.geoPath().projection(projection);

        // Load map data
        d3.json("world-50m.json").then(world => {
            // Load CSV data
            d3.csv("data.csv").then(data => {
                // Convert string latitude and longitude to numbers
                data.forEach(d => {
                    d.Latitude = +d.Latitude;
                    d.Longitude = +d.Longitude;
                    d.Storage = +d.Storage;
                });

                // Group data by Operating_Country and calculate total storage for each country
                const dataByCountry = d3.group(data, d => d.Operating_Country);
                const totalStorageByCountry = new Map();

                dataByCountry.forEach((value, key) => {
                    const totalStorage = d3.sum(value, d => d.Storage);
                    totalStorageByCountry.set(key, totalStorage);
                });

                // Draw map
                svg.selectAll("path")
                    .data(world.features)
                    .enter().append("path")
                    .attr("d", path)
                    .attr("fill", "lightgray")
                    .attr("stroke", "white");

                // Overlay countries with storage data
                svg.selectAll("circle")
                    .data(data)
                    .enter().append("circle")
                    .attr("cx", d => projection([d.Longitude, d.Latitude])[0])
                    .attr("cy", d => projection([d.Longitude, d.Latitude])[1])
                    .attr("r", d => Math.sqrt(totalStorageByCountry.get(d.Operating_Country)) * 2)
                    .style("fill", "steelblue")
                    .style("opacity", 0.5);

                // Title for the map
                svg.append("text")
                    .attr("x", width / 2)
                    .attr("y", 20)
                    .attr("text-anchor", "middle")
                    .style("font-size", "16px")
                    .text("STORAGE DISTRIBUTION AMONG OPCOS");
            }).catch(error => {
                console.error("Error loading the CSV data: ", error);
            });
        }).catch(error => {
            console.error("Error loading the map data: ", error);
        });
    </script>
</body>
</html>
